apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'

version = '0.2.0'
group = 'ru.pocketbyte.hydra.log'

android {
    compileSdkVersion project.android_sdk_compile
    buildToolsVersion project.android_build_tool_version

    defaultConfig {
        minSdkVersion project.android_sdk_min
        targetSdkVersion project.android_sdk_target
        versionCode 1
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'js')
        
        final def nativeCInterops = {
            ns_format {
                defFile project.file("src/nativeInterop/ns_format.def")
            }
        }

        macosX64('macos') {
            compilations.main.cinterops(nativeCInterops)
        }

        iosArm64('iosArm32') {
            compilations.main.cinterops(nativeCInterops)
        }

        iosArm64('iosArm64') {
            compilations.main.cinterops(nativeCInterops)
        }

        iosX64('iosX64') {
            compilations.main.cinterops(nativeCInterops)
        }
    }

    sourceSets {
        // Main Source Sets
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

        }

        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }

        androidMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
                api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }

        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
                api "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }

        macosMain {}
        iosArm64Main { dependsOn macosMain }
        iosArm32Main { dependsOn macosMain }
        iosX64Main { dependsOn macosMain }

        // ==================
        // Test Source Sets
        commonTest {
            dependsOn commonMain
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test"
                api "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
        jvmTest {
            dependsOn jvmMain
            dependsOn commonTest
        }
        androidTest {
            dependsOn androidMain
            dependsOn commonTest
        }
        jsTest {
            dependsOn jsMain
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test"
                api "org.jetbrains.kotlin:kotlin-test-js"
            }
        }

        macosTest {
            dependsOn macosMain
            dependsOn commonTest
        }
        iosArm64Test.dependsOn macosTest
        iosArm32Test.dependsOn macosTest
        iosX64Test.dependsOn macosTest
    }
}

//==================================================================================================
// Publication
//==================================================================================================

apply plugin: "maven-publish"
apply plugin: 'com.jfrog.bintray'

bintrayUpload.doFirst {
    publications = []

    def pubs = project.extensions.getByName("publishing").getPublications()

    for(pub in pubs) {
        publications += pub.name
        println("groupId ${pub.groupId}, artifactId ${pub.artifactId}")
    }
}

// FIXME common artifact doesn't upload
bintray {
    user = project.hasProperty('bintray.publish.user') ? project.property('bintray.publish.user') : ''
    key = project.hasProperty('bintray.publish.apikey') ? project.property('bintray.publish.apikey') : ''
    publish = true
    override = false

    pkg {
        repo = "maven"
        name = "hydra-log"
        userOrg = 'pocketbyte'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/PocketByte/'
        version {
            name = project.version
            released  = new Date()
        }
    }
}