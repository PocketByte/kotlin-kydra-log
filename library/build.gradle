apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'


version = '1.0.0'
group = 'ru.pocketbyte.hydra.log'

android {
    compileSdkVersion project.android_sdk_compile
    buildToolsVersion project.android_build_tool_version

    defaultConfig {
        minSdkVersion project.android_sdk_min
        targetSdkVersion project.android_sdk_target
        versionCode 1
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'js')
        
        macosX64('macos')
        iosArm64('iosArm32')
        iosArm64('iosArm64')
        iosX64('iosX64')
    }

    sourceSets {
        // Main Source Sets
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

        }

        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }

        androidMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
                api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }

        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
                api "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }

        macosMain {}
        iosArm64Main { dependsOn macosMain }
        iosArm32Main { dependsOn macosMain }
        iosX64Main { dependsOn macosMain }

        // ==================
        // Test Source Sets
        commonTest {
            dependsOn commonMain
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test"
                api "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
        jvmTest {
            dependsOn jvmMain
            dependsOn commonTest
        }
        androidTest {
            dependsOn androidMain
            dependsOn commonTest
        }
        jsTest {
            dependsOn jsMain
            dependencies {
                api "org.jetbrains.kotlin:kotlin-test"
                api "org.jetbrains.kotlin:kotlin-test-js"
            }
        }

        macosTest {
            dependsOn macosMain
            dependsOn commonTest
        }
        iosArm64Test.dependsOn macosTest
        iosArm32Test.dependsOn macosTest
        iosX64Test.dependsOn macosTest
    }
}

//==================================================================================================
// Publication
//==================================================================================================

apply plugin: "maven-publish"
apply plugin: 'com.github.dcendents.android-maven'

publishing {
    repositories {
        maven {
            url = "https://api.bintray.com/content/pocketbyte/maven/${project.name}/${project.version}"
            credentials {
                username project.hasProperty('bintray.publish.user') ? project.property('bintray.publish.user') : ''
                password project.hasProperty('bintray.publish.apikey') ? project.property('bintray.publish.apikey') : ''
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                groupId project.group
                artifactId "${project.name}-android"
            }
            withXml {
                def root = asNode()

                def dependencies = root.get('dependencies') ?: root.appendNode('dependencies')

                // Add common dependency
                def commonDependency = dependencies.appendNode('dependency')
                commonDependency.appendNode('groupId', project.group)
                commonDependency.appendNode('artifactId', "${project.name}-jvm")
                commonDependency.appendNode('version', project.version)
                commonDependency.appendNode('scope', 'runtime')
            }
        }
    }
}